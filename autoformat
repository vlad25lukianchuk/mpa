#!/bin/bash

# This helper script check code style of all sources and headers in the
# corresponding repo and prints any code style violations into the standard
# error output.
#
# The '--edit' parameter allows to format and apply changes to the
# files in place.

function do_format() {
  # Perform formatting using provided command.
  #
  # $1 must be a valid path to source file

  local file="$1"
  if [[ -z "${file}" ]]; then
    echo "Error: file path is not provided."
    exit 1
  fi

  # unfortunate call - to determine if the file has code-style errors
  errors=$(${format_error_cmd} ${file} 2>&1)
  local format_status="$?"

  if [[ ${format_status} -ne 0 ]]; then
    has_errors=1
    if [[ ${dry_run} -eq 0 ]]; then
      echo "Processing file: ${file}"
      ${format_edit_cmd} ${file}
    else
      ${format_error_cmd} ${file}
    fi
  fi

  return 0
}

function print_help() {
  echo "Usage: $0 [--edit] [--help]"
  echo "Process source files and check according to the defined code style." \
       "Print results to the standard output."
  echo
  echo "Optional arguments:"
  echo "  --help - print this help and exit"
  echo "  --edit - process and edit files in place"
}

srcpath=$(dirname $0)
srcpath=$(cd "$scrpath"; pwd)
format_error_cmd="clang-format -n --Werror --style=file" # do not edit, but show as errors
format_edit_cmd="clang-format -i --style=file"           # format with edit in place
dry_run=1    # dry run by default
has_errors=0 # no code-style violations

# find all C/C++ files:
#   h, H, hpp, hh, h++, hxx
#   c, C, cpp, cc, c++, cxx
cpp_files=$(find "${srcpath}" | grep -E '\.((c|C)c?(pp|xx|\+\+)*$|(h|H)h?(pp|xx|\+\+)*$)')
exclude_regex=external

case "$1" in
  --help )
    print_help
    exit 0;;
  --edit )
    dry_run=0;;
  * )
    dry_run=1;;
esac

for file in ${cpp_files}; do
  if ! [[ ${file} =~ ${exclude_regex} ]]; then
    do_format ${file}
  fi
done

if [[ ${dry_run} -eq 1 ]]; then
  if [[ ${has_errors} -ne 0 ]]; then
    echo "********************************"
    echo "Files processing finished. Code style errors found."
    echo "********************************"
  else
    echo "********************************"
    echo "Files processing finished. No errors found."
    echo "********************************"
  fi
else
  if [[ ${has_errors} -ne 0 ]]; then
    echo "********************************"
    echo "Files are successfully formatted"
    echo "********************************"
  else
    echo "********************************"
    echo "No code style violations found."
    echo "********************************"
  fi
fi

exit 0
