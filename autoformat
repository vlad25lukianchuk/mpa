#!/bin/bash

# This script formats all sources and headers in the corresponding mpa repo
# according to defined style
# By default it performs formatting and output changes into the standard
# output. The '--edit' parameter allowes to perform and apply changes to the
# files in place.

function do_format() {
  # Perform formatting using provided command. It assumes the
  # common source tree structure, such as that contains src/ and
  # include/ directories
  #
  # $1 must be a valid command: installed and available in $PATH
  # $2 must be a valid path to the module with source files
  # both parameters must not be empty strings

  local cmd="$1"
  shift
  local m_path="$*"

  if [[ -d "${m_path}/src" ]]; then
    # assume that if src dir exists, then appropriate
    # inlcude should exists as well
    for path in "${m_path}/src" "${m_path}/include"; do
      local files="${files} ${path}/*"
    done
  else
    names=$(ls "${m_path}" | grep -P ".*.cpp|.*.h")
    for name in ${names}; do
      local files="${files} ${m_path}/${name}"
    done
  fi

  for file in ${files}; do
    echo "Processing file: ${file}"
    ${cmd} ${file}
  done
}

function format() {
  # Checks arguments, and perform formatting via do_format
  #
  # $1 must be a valid command: installed and available in $PATH
  # $2 must be a list of paths to the module whith source files
  # to be formatted

  cmd="$1"
  if [[ -z "${cmd}" ]]; then
    echo "Error: format command is not provided."
    exit 1
  fi

  shift
  modules="$*"
  if [[ -z "${modules}" ]]; then
    echo "Error: modules paths are not provided."
  fi

  for module in ${modules}; do
    arg=("${cmd}" "${module}")
    do_format "${arg[@]}"
  done
}

function print_help() {
  echo "Usage: $0 [--edit] [--help]"
  echo "Formal sources according to the defined style and print result to" \
    "the standard output"
  echo
  echo "Optional arguments:"
  echo "  --help - print this help and exit"
  echo "  --edit - format and edit files"
}

srcpath=$(dirname $0)
srcpath=$(cd "$scrpath"; pwd)
format_cmd="clang-format" # format command
format_edit_cmd="clang-format -i" # format with edit in place

# modules to be processed
# TODO: some new modules does not have
# appropriate structure yet, thus should be excluded explicitly
# mpa_modules=$(ls ${repo_path} | grep -P "mpa.*")
# TODO: workaround, make it recursive
mpa_modules="mpabase/core mpabase/core/test mpabase/interface mpabase/math \
   mpalog mpabase/math/test mpabase/interface/test"
other_modules="examples"

for module in ${mpa_modules} ${other_modules}; do
  modules_paths="${modules_paths} ${srcpath}/${module}"
done

case "$1" in
  --help )
    print_help
    exit 0;;
  --edit )
    cmd=("${format_edit_cmd}");;
  * )
    cmd=("${format_cmd}");;
esac

format "${cmd[@]}" ${modules_paths}

if [[ $? -eq 0 ]]; then
  echo "********************************"
  echo "Files are successfully formatted"
  echo "********************************"
else
  echo "********************************"
  echo "Errors occured while formatting files"
  echo "********************************"
  exit 1
fi

exit 0
